{"version":3,"sources":["components/Expresso/Expresso.module.css","components/Buttons/Buttons.module.css","components/Section/Section.module.css","components/Section/Section.jsx","components/Expresso/Expresso.jsx","components/Buttons/Buttons.jsx","components/Notification/Notification.jsx","App/App.js","index.js"],"names":["module","exports","Section","title","children","className","styles","section","Expresso","good","neutral","bad","total","positiveFeedback","item","defaultProps","Buttons","state","handleIncrement","buttonList","map","type","onClick","name","Notification","message","App","useState","setGood","setNeutral","setBad","totalFeedback","e","target","console","log","prevState","positive","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,KAAO,yB,kBCAzBD,EAAOC,QAAU,CAAC,WAAa,4BAA4B,KAAO,wB,iBCAlED,EAAOC,QAAU,CAAC,QAAU,2B,uJCebC,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,0BAASC,UAAWC,IAAOC,QAA3B,UACE,6BAAKJ,IACJC,M,gBCFDI,EAAW,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,IAAKC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,iBAC7C,OACE,8BACE,+BACE,oBAAIR,UAAWC,IAAOQ,KAAtB,SACE,sCAASL,OAEX,oBAAIJ,UAAWC,IAAOQ,KAAtB,SACE,yCAAYJ,OAEd,oBAAIL,UAAWC,IAAOQ,KAAtB,SACE,qCAAQH,OAEV,oBAAIN,UAAWC,IAAOQ,KAAtB,SACE,uCAAUF,OAEZ,oBAAIP,UAAWC,IAAOQ,KAAtB,SACE,mDAEGD,EAFH,eAWVL,EAASO,aAAe,CACtBF,iBAAkB,MAWLL,Q,gBCtBAQ,EApBC,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,gBAExB,OACE,oBAAIb,UAAWC,IAAOa,WAAtB,SACGF,EAAMG,KAAI,SAAAN,GAAI,OACb,oBAAIT,UAAWC,IAAOQ,KAAtB,SACE,wBAAQO,KAAK,SAASC,QAASJ,EAAiBK,KAAMT,EAAtD,SACG,CAACA,MAF2BA,SCJ1BU,EAJM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,K,MC8GEC,MAhGf,WACE,MAAwBC,mBAAS,GAAjC,mBAAOlB,EAAP,KAAamB,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOjB,EAAP,KAAgBmB,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOhB,EAAP,KAAYmB,EAAZ,KAoCMC,EAHUtB,EAAOC,EAAUC,EAUjC,OACE,eAAC,WAAD,WACE,cAAC,EAAD,CAASR,MAAM,wBAAf,SACE,cAAC,EAAD,CACEc,MAAO,CAAC,OAAQ,UAAW,OAC3BC,gBA9CgB,SAAAc,GAEtB,IAAQT,EAASS,EAAEC,OAAXV,KAER,OADAW,QAAQC,IAAIZ,GACJA,GACN,IAAK,OACHK,GAAQ,SAAAQ,GAAS,OAAIA,EAAY,KACjC,MAEF,IAAK,UACHP,GAAW,SAAAO,GAAS,OAAIA,EAAY,KACpC,MAEF,IAAK,MACHN,GAAO,SAAAM,GAAS,OAAIA,EAAY,KAChC,MAEF,QACE,aA+BF,cAAC,EAAD,CAASjC,MAAM,aAAf,SACG4B,EACC,cAAC,EAAD,CACEtB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOmB,EACPlB,iBArB8B,WACtC,IAAMwB,EAAWC,KAAKC,MAAc,IAAP9B,EAAcsB,GAE3C,OADAG,QAAQC,IAAI1B,GACJ4B,GAAW,EAkBOG,KAGpB,cAAC,EAAD,CAAcf,QAAQ,4BCzEhCgB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c8b43123.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Expresso_item__1Hw_R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonList\":\"Buttons_buttonList__3awVU\",\"item\":\"Buttons_item__1HG7L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__Ap5Zy\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Section.module.css';\nconst Section = ({ title, children }) => {\n  return (\n    <section className={styles.section}>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n//import Notification from '../Notification/Notification';\nimport styles from './Expresso.module.css';\n\nconst Expresso = ({ good, neutral, bad, total, positiveFeedback }) => {\n  return (\n    <div>\n      <ul>\n        <li className={styles.item}>\n          <p>Good:{good}</p>\n        </li>\n        <li className={styles.item}>\n          <p>Neutral:{neutral}</p>\n        </li>\n        <li className={styles.item}>\n          <p>Bad:{bad}</p>\n        </li>\n        <li className={styles.item}>\n          <p>Total:{total}</p>\n        </li>\n        <li className={styles.item}>\n          <p>\n            Positive feedback:\n            {positiveFeedback}%\n          </p>\n        </li>\n        {/* <Notification message={'No feedback given'}></Notification> */}\n      </ul>\n    </div>\n  );\n};\n\nExpresso.defaultProps = {\n  positiveFeedback: null,\n};\n\nExpresso.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  //total: PropTypes.func.isRequired,\n  //positiveFeedback: PropTypes.func.isRequired,\n};\n\nexport default Expresso;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Buttons.module.css';\nconst Buttons = ({ state, handleIncrement }) => {\n  // console.log(name);\n  return (\n    <ul className={styles.buttonList}>\n      {state.map(item => (\n        <li className={styles.item} key={item}>\n          <button type=\"button\" onClick={handleIncrement} name={item}>\n            {[item]}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nButtons.propTypes = {\n  state: PropTypes.array.isRequired,\n  handleIncrement: PropTypes.func.isRequired,\n};\n\nexport default Buttons;\n","const Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nexport default Notification;\n","//import React, { Component, Fragment } from 'react';\nimport { useState } from 'react';\nimport { Fragment } from 'react';\nimport Section from '../components/Section';\nimport Expresso from '../components/Expresso';\nimport Buttons from '../components/Buttons';\nimport Notification from '../components/Notification';\nimport './App.css';\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\nfunction App() {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const handleIncrement = e => {\n    //const textButton = e.target.textContent;\n    const { name } = e.target;\n    console.log(name);\n    switch (name) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  // const buttonsName = e => {\n  //   const { name } = e.trget.name;\n  //   return name;\n  // }\n  const countTotalFeedback = () => {\n    // return Object.keys(good, neutral, bad).reduce(\n    //   (acc, value) => acc + [value],\n    //   0,\n    // );\n    const total = good + neutral + bad;\n    return total;\n  };\n  const totalFeedback = countTotalFeedback();\n  const countPositiveFeedbackPercentage = () => {\n    const positive = Math.round((good * 100) / totalFeedback);\n    console.log(good);\n    return !positive ? 0 : positive;\n  };\n\n  return (\n    <Fragment>\n      <Section title=\"PLEASE LEAVE FEEDBACK\">\n        <Buttons\n          state={['good', 'neutral', 'bad']}\n          handleIncrement={handleIncrement}\n        />\n      </Section>\n      <Section title=\"Statistics\">\n        {totalFeedback ? (\n          <Expresso\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={totalFeedback}\n            positiveFeedback={countPositiveFeedbackPercentage()}\n          />\n        ) : (\n          <Notification message=\"No feedback given\"></Notification>\n        )}\n      </Section>\n    </Fragment>\n  );\n}\n\n//   render() {\n//     const { good, neutral, bad } = this.state;\n\n//     return (\n//       <Fragment>\n//         <Section title=\"PLEASE LEAVE FEEDBACK\">\n//           <Buttons state={this.state} handleIncrement={this.handleIncrement} />\n//         </Section>\n//         <Section title=\"Statistics\">\n//           {!this.countTotalFeedback() ? (\n//             <Notification message=\"No feedback given\"></Notification>\n//           ) : (\n//             <Expresso\n//               good={good}\n//               neutral={neutral}\n//               bad={bad}\n//               total={this.countTotalFeedback}\n//               positiveFeedback={this.countPositiveFeedbackPercentage}\n//             />\n//           )}\n//         </Section>\n//       </Fragment>\n//     );\n//   }\n// }\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}